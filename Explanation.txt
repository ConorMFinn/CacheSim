The first 18 outputs were produced by the above method, described in English below, examples are underneath. 

-- Explanation --

I first calculated the number of blocks in the cache by dividing the number of bytes in the cache (C) by the number of bytes in a block (B) so I could get the number of index bits by doing log2(n) where n is the number of blocks.

Then I calculate the number of bytes in a line by dividing number of bytes in a block (B) by the number of lines in a block (k), again using log2(n) to get the number of offset bits.

Once I have these values, I convert the supplied addresses to a binary number, separate the offset bits from the end, then the index bits, then convert the remaining tag back to a decimal number for convenience.

I can now simulate the cache, I disregard the offset as it is not relevant (because we are not looking at specific data bytes, but the tag values and the block values) and use the index to determine which of the blocks the tags will be added to, or read from the block.

A loaded address is pointed to a block by its index, if the tag is not in the block and the block still has free space (capacity determined by the number of lines (k)) it is simply added to the front of the block. If there is no free space, value in the block is removed and the new tag is added to the front. Either way, an 'M' is appended to the output.

If the tag is in the block indicated by the index then the value is moved to the front of the cache and a 'C' is appended to the output.

-- Working out --

-- 00 --
8 2 1 1
211
211
211
211
211

8 Bits in word.
2 Bytes in cache.
1 Bytes in block.
1 Lines in block.

2 / 1 = 2 Blocks in Cache, 1 bit index.
1 / 1 = 1 Byte in Line, 0 bit offset.

105 - 1101001_1 [][105] M
105 - 1101001_1 [][105] C
105 - 1101001_1 [][105] C
105 - 1101001_1 [][105] C
105 - 1101001_1 [][105] C

MCCCC

-- 01 --
8 2 1 1
126
237
237
237
126

8 Bits in word.
2 Bytes in cache.
1 Bytes in block.
1 Lines in block.

2 / 1 = 2 Blocks in Cache, 1 bit index.
1 / 1 = 1 Byte in Line, 0 bit offset.

126 0111111_0   [126],[]	M
237 1110110_1   [126],[237]	M  
237 1110110_1   [126],[237]	C
237 1110110_1   [126],[237]	C
126 0111111_0   [126],[237]	C

MMCCC

-- 02 --
8 2 1 1
81
81
81
81
81
81
81
81
81
225

MCCCCCCCCM

-- 03 --
8 2 1 1
41	M
41	C
53	M
162	M
26	M
103	M
103	C
26	C
77	M
26	C

8 Bits in word.
2 Bytes in cache.
1 Bytes in block.
1 Lines in block.

2 / 1 = 2 Blocks in Cache, 1 bit index.
1 / 1 = 1 Byte in Line, 0 bit offset.

0010100_1	[][]
0010100_1	[][]
0011010_1	[][]
1010001_0	[][]
0001101_0	[][]
0110011_1	[][]
0110011_1	[][]
0001101_0	[][]
0100110_1	[][]
0001101_0	[][]

MCMMMMCCMC

-- 04 --
8 4 1 1
162
162
31
162
221
21
31
4
48
162

8 Bits in word.
4 Bytes in cache.
1 Bytes in block.
1 Lines in block.

4 / 1 = 4 Blocks in Cache, 2 bit index.
1 / 1 = 1 Byte in Line, 0 bit offset.


101000_10	[][][162][]
101000_10	[][][162][]
000111_11	[][][162][31]
101000_10	[][][162][31]
110111_01	[][221][162][31]
000101_01	[][21][162][31]
000111_11	[][21][162][31]
000001_00	[4][21][162][31]
001100_00	[48][21][162][31]
101000_10	[48][21][162][31]

MCMCMMCMMC

-- 05 --
8 8 2 1
160
161
241
199
241
240
64
65
199
64

8 Bits in word.
8 Bytes in cache.
2 Bytes in block.
1 Lines in block. Block contains 1 value.

8 / 2 = 4 Blocks in Cache, 2 bit index.
2 / 1 = 2 Bytes in Line, 1 bit offset.


10100_00_0	[20][]	Two blocks interacted with.
10100_00_1	[20][]
11110_00_1	[30][]
11000_11_1	[30][24]
11110_00_1	[30][24]
11110_00_0	[30][24]
01000_00_0	[8][24]
01000_00_1	[8][24]
11000_11_1	[8][24]
01000_00_0	[8][24]

MCMMCCMCCC

-- 06 --
8 2 2 2
175
175
122
175
122

W = 8 Bits in word.
C = 2 Bytes in cache.
B = 2 Bytes in block.
k = 2 Lines in block. Block contains this many addresses.

C/B = 2 / 2 = 1 Blocks in Cache, 0 bit index.
B/k = 2 / 2 = 1 Bytes in Line, 0 bit offset.

175	[175]
175	[175]
122	[175, 122]
175	[122, 175]
122	[175,122]

MCMCC

-- 07 --
8 2 2 2
145
210
82
210
190

W = 8 Bits in word.
C = 2 Bytes in cache.
B = 2 Bytes in block.
k = 2 Lines in block. Block contains this many addresses.

C/B = 2 / 2 = 1 Blocks in Cache, 0 bit index.
B/k = 2 / 2 = 1 Bytes in Line, 0 bit offset.

145	[145]
210	[145, 210]
82	[210, 82]
210	[82, 210]
190	[210, 190]

MMMCM

-- 08 --
8 2 2 2
54
54
235
235
202
202
202
202
235
235

W = 8 Bits in word.
C = 2 Bytes in cache.
B = 2 Bytes in block.
k = 2 Lines in block. Block contains this many addresses.

C/B = 2 / 2 = 1 Blocks in Cache, 0 bit index.
B/k = 2 / 2 = 1 Bytes in Line, 0 bit offset.

54	[54]
54	[54]
235	[54, 235]
235	[54, 235]
202	[235, 202]
202	[235, 202]
202	[235, 202]
202	[235, 202]
235	[202, 235]
235	[202, 235]

MCMCMCCCCC

-- 09 --
8 2 2 2
7
9
9
9
210
210
229
229
210
210

W = 8 Bits in word.
C = 2 Bytes in cache.
B = 2 Bytes in block.
k = 2 Lines in block. Block contains this many addresses.

C/B = 2 / 2 = 1 Blocks in Cache, 0 bit index.
B/k = 2 / 2 = 1 Bytes in Line, 0 bit offset.

7	[7]
9	[7,9]
9	[7,9]
9	[7,9]
210	[9,210]
210	[9,210]
229	[210, 229]
229	[210, 229]
210	[229,210]
210	[229,210]

MMCCMCMCCC

-- 10 --
8 4 4 4
81
81
81
86
85
85
81
86
86
214

W = 8 Bits in word.
C = 4 Bytes in cache.
B = 4 Bytes in block.
k = 4 Lines in block. Block contains this many addresses.

C/B = 4 / 4 = 1 Blocks in Cache, 0 bit index.
B/k = 4 / 4 = 1 Bytes in Line, 0 bit offset.

81	[81]
81	[81]
81	[81]
86	[81,86]
85	[81,86,85]
85	[81,86,85]
81	[86,85,81]
86	[85,81,86]
86	[85,81,86]
214	[81,86,214]

MCCMMCCCCM

-- 11 --
8 4 4 2
127
127
127
127
126
208
153
153
153
95

W = 8 Bits in word.
C = 4 Bytes in cache.
B = 4 Bytes in block.
k = 2 Lines in block. Block contains this many addresses.

C/B = 4 / 4 = 1 Blocks in Cache, 0 bit index.
B/k = 4 / 2 = 2 Bytes in Line, 1 bit offset.

0111111_1	[63]
0111111_1	[63]
0111111_1	[63]
0111111_1	[63]
0111111_0	[63]
1101000_0	[63,104]
1001100_1	[104, 76]
1001100_1	[104, 76]
1001100_1	[104, 76]
0101111_1	[76, 47]

MCCCCMMCCM

-- 12 --
8 4 2 2
224
222
140
222
178
60
178
178
149
17

W = 8 Bits in word.
C = 4 Bytes in cache.
B = 2 Bytes in block.
k = 2 Lines in block. Block contains this many addresses.

C/B = 4 / 2 = 2 Blocks in Cache, 1 bit index.
B/k = 2 / 2 = 1 Bytes in Line, 0 bit offset.


1110000_0	[112][]	
1101111_0	[112, 111][]
1000110_0	[111,70][]
1101111_0	[70, 111][]
1011001_0	[111,89][]
0011110_0	[89,30][]
1011001_0	[30,89][]
1011001_0	[30,89][]
1001010_1	[30,89][74]
0001000_1	[30,89][74,8]

MMMCMMCCMM

-- 13 --
8 4 2 2
4
33
226
4
17
131
136
147
12
216

W = 8 Bits in word.
C = 4 Bytes in cache.
B = 2 Bytes in block.
k = 2 Lines in block. Block contains this many addresses.

C/B = 4 / 2 = 2 Blocks in Cache, 1 bit index.
B/k = 2 / 2 = 1 Bytes in Line, 0 bit offset.


2 	0	[2]		[]		M
16	1	[2]		[16]	M
113	0	[2, 113][16]	M
2 	0	[113, 2][16]	C	
8 	1	[113, 2][16, 8]	M	
65 	1	[113, 2][8, 65] M		
68 	0	[2, 68]	[8, 65]	M	
73 	1	[2, 68]	[65, 73]M		
6 	0	[][]			M
108	0	[][]			M

MMMCMMMMMM

-- 14 --
8 4 2 2
163
163
80
80
80
80
180
80
229
80

W = 8 Bits in word.
C = 4 Bytes in cache.
B = 2 Bytes in block.
k = 2 Lines in block. Block contains this many addresses.

C/B = 4 / 2 = 2 Blocks in Cache, 1 bit index.
B/k = 2 / 2 = 1 Bytes in Line, 0 bit offset.


81	1	[][81]		M
81	1	[][81]		C
40	0	[40][81]	M
40	0	[40][81]	C
40	0	[40][81]	C
40	0	[40][81]	C
90	0	[40,90][81]	M
40	0	[90,40][81] C
114	1	[90,40][81,114] M
40	0	[90,40][81]	C

MCMCCCMCMC

-- 15 --
8 8 2 2
198
198
247
219
198
219
111
219
120
88

W = 8 Bits in word.
C = 8 Bytes in cache.
B = 2 Bytes in block.
k = 2 Lines in block. Block contains this many addresses.

C/B = 8 / 2 = 4 Blocks in Cache, 2 bit index.
B/k = 2 / 2 = 1 Bytes in Line, 0 bit offset.


49 10	M
49 10	C
61 11	M
54 11	M
49 10	C
54 11	C
27 11	M
54 11	C
30 00	M
22 00	M

MCMMCCMCMM

-- 16 --
8 16 4 2
215
163
231
46
220
76
120
231
120
121

W = 8 Bits in word.
C = 16 Bytes in cache.
B = 4 Bytes in block.
k = 2 Lines in block. Block contains this many addresses.

C/B = 16 / 4 = 4 Blocks in Cache, 2 bit index.
B/k = 4 / 2 = 2 Bytes in Line, 1 bit offset.


26 	11 1 	[][][][26]		M
20 	01 1	[][20][][]		M
28	11 1	[][][][28, 26] 	M
5	11 0	[][][][5, 28] 	M
27	10 0	[][][27][] 		M
9	10 0	[][][9,27][] 	M
15 	00 0	[15][][][] 		M
28 	11 1	[][][][28,5] 	C
15 	00 0	[15][][][] 		C
15 	00 1	[15][][][] 		C

MMMMMMMCCC

-- 17 --
8 16 16 8
27
32
140
140
32
213
26
227
163
212

W = 8 Bits in word.
C = 16 Bytes in cache.
B = 16 Bytes in block.
k = 8 Lines in block. Block contains this many addresses.

C/B = 16 / 16 = 1 Blocks in Cache, 0 bit index.
B/k = 16 / 8 = 2 Bytes in Line, 1 bit offset.


13	[13]		M
16	[13,16]		M
70	[13,16,70]	M
70	[13,16,70]	C
16	[13,70,16]	C
106	[13,70,16,106]	M
13	[70,16,106,13]	C
113	[70,16,106,13,113] M
81	[70,16,106,13,113,81] M
106	[70,16,13,113,81,106] C

MMMCCMCMMC

-- 18 & 19 --
Large file, used program in src.zip